{"version":3,"sources":["Grades.js","Header.js","App.js","index.js"],"names":["Grade","styled","div","StyledGrades","StyledInput","input","Grades","useState","weight","percent","label","grades","setGrades","del","setDel","gradeGoal","setGradeGoal","useEffect","newGrades","filter","JSON","stringify","length","concat","id","place","effect","getContent","style","textAlign","color","map","grade","i","Object","keys","weightKey","percentKey","labelKey","type","name","value","placeholder","data-tip","data-for","onInput","e","newDel","target","Array","from","index","for","replace","width","charAt","toUpperCase","slice","margin","maxWidth","parseFloat","currGrades","currWeights","forEach","parseInt","averageGrade","toFixed","avg","currentGrade","remainingWeight","totalWeight","calculateRemainingGradeStr","Header","StyledHeader","header","StyledCreatorText","p","StyledCreatorLink","a","href","App","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5cf1cb2c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ReactToolTip from \"react-tooltip\";\r\nimport styled from 'styled-components';\r\n\r\n// Styles\r\nconst Grade = styled.div`\r\n  display: inline-block;\r\n  margin: auto;\r\n  margin-bottom: 10px;\r\n  justify-content: left;\r\n`;\r\nconst StyledGrades = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  width: 45%;\r\n  background-color: #43AA8B;\r\n  border-radius: 20px;\r\n  padding-left: 20px;\r\n  align-content: center;\r\n`;\r\nconst StyledInput = styled.input`\r\n  margin: 5px;\r\n  text-align: center;\r\n  width: 70px;\r\n`;\r\n\r\nexport default function Grades() {\r\n  const [grades, setGrades] = useState([{weight: '', percent: '', label: ''}]);\r\n  const [del, setDel] = useState(false);\r\n  const [gradeGoal, setGradeGoal] = useState(80);\r\n\r\n  const averageGrade = ()=> {\r\n    let currGrades = 0;\r\n    let currWeights = 0;\r\n    grades.forEach(({weight, percent})=> {\r\n      if (weight && percent) {\r\n        currGrades += parseInt(weight)*parseInt(percent);\r\n        currWeights += parseInt(weight);\r\n      }\r\n    });\r\n    if (currWeights === 0) {\r\n      return 0;\r\n    }\r\n    return currGrades / currWeights;\r\n  }\r\n\r\n  const currentGrade = ()=> {\r\n    let avg = 0;\r\n    grades.forEach(({weight, percent})=> {\r\n      if (weight && percent) {\r\n        avg += parseInt(weight)*parseInt(percent)/100;\r\n      }\r\n    });\r\n    return avg;\r\n  }\r\n\r\n  const calculateRemainingGradeStr = ()=> {\r\n    // Get current avg grade\r\n    let avg = 0;\r\n    let totalWeight = 0;\r\n    let remainingWeight = 100;\r\n    let remainingGrade = 0;\r\n    // Get avg grade and remaining weight\r\n    grades.forEach(({weight, percent})=> {\r\n      if (weight && percent) {\r\n        avg += parseInt(weight)*parseInt(percent)/100;\r\n        totalWeight += parseInt(weight);\r\n      }\r\n    });\r\n    remainingWeight = 100-totalWeight;\r\n\r\n    // Remaining grade calculation\r\n    remainingGrade = (gradeGoal - avg) / (remainingWeight/100);\r\n    return `${parseFloat(remainingGrade).toFixed(2)}% of weight ${remainingWeight}%`;\r\n  }\r\n\r\n  useEffect(()=> {\r\n    // If the delete flag is on, see if we can remove empty grades and remove them. Set the delete flag to false.\r\n    if (del) {\r\n      const newGrades = grades.filter(({label, weight, percent})=> label || weight || percent);\r\n      \r\n      if (JSON.stringify(newGrades) !== JSON.stringify(grades)) {\r\n        setGrades(newGrades);\r\n      }\r\n      setDel(false);\r\n    }\r\n    // If the last element is filled in, or if there is nothing in the list, add a new grade to grades\r\n    if (grades.length < 1 || grades[grades.length-1].weight || grades[grades.length-1].percent || grades[grades.length-1].label) {\r\n      setGrades(grades.concat([{weight: '', percent: '', label: ''}]));\r\n    }\r\n    return null;\r\n  }, [grades, del]);\r\n\r\n  return (\r\n    <StyledGrades>\r\n      <ReactToolTip\r\n        id='yourGradeTip'\r\n        place='top'\r\n        effect='solid'\r\n        getContent={label=> `Enter the grade you got on ${label ? 'your ' + label : 'this'}`}\r\n      />\r\n      <ReactToolTip\r\n        id='weightTip'\r\n        place='top'\r\n        effect='solid'\r\n        getContent={label=> `Enter how much ${label ? 'your ' + label : 'this'} is worth`}\r\n      />\r\n      <ReactToolTip\r\n        id='labelTip'\r\n        place='top'\r\n        effect='solid'\r\n      >\r\n        Enter whatever this is called (e.g. Midterm, Tests, Tutorials, Bonus, etc)\r\n      </ReactToolTip>\r\n      <ReactToolTip\r\n        id='currentGradeTip'\r\n        place='top'\r\n        effect='solid'\r\n      >\r\n        If you did no more work for this course, you would walk out with this grade\r\n      </ReactToolTip>\r\n      <ReactToolTip\r\n        id='averageGradeTip'\r\n        place='top'\r\n        effect='solid'\r\n      >\r\n        This is your average grade\r\n      </ReactToolTip>\r\n      <ReactToolTip\r\n        id='gradeGoalTip'\r\n        place='top'\r\n        effect='solid'\r\n      >\r\n        What grade are you looking for?\r\n      </ReactToolTip>\r\n      <h1 style={{textAlign: 'center', color: '#F0F4EF'}}>Enter Your Grades Below</h1>\r\n        {grades.map((grade, i)=> {\r\n          const [weightKey, percentKey, labelKey] = Object.keys(grade);\r\n          return (\r\n            <Grade>\r\n              <StyledInput\r\n                type='text' name={`${labelKey}-${i}`}\r\n                value={grades[i].label}\r\n                i={i} placeholder='Assessment'\r\n                data-tip data-for='labelTip'\r\n                onInput={e=> {\r\n                  const newDel = e.target.value.length === 0;\r\n                  setGrades(Array.from(grades, (grade, index)=> index===i ? {...grade, [labelKey]: e.target.value} : grade));\r\n                  setDel(newDel);\r\n                }}\r\n              />\r\n              <label for={`${labelKey}-${i}`}>, </label>\r\n              <StyledInput\r\n                type='text' name={`${percentKey}-${i}`}\r\n                value={grades[i].percent}\r\n                i={i} placeholder='Your Grade'\r\n                data-tip={grades[i].label} data-for='yourGradeTip'\r\n                onInput={e=> {\r\n                  const newDel = e.target.value.length === 0;\r\n                  setGrades(Array.from(grades, (grade, index)=> index===i ? {...grade, [percentKey]: e.target.value.replace(/\\D/,'')} : grade));\r\n                  setDel(newDel);\r\n                }}\r\n              />\r\n              <label for={`${percentKey}-${i}`}>% </label>\r\n              <StyledInput\r\n                style={{width: '50px'}}\r\n                type='text' name={`${weightKey}-${i}`}\r\n                value={grades[i].weight}\r\n                i={i} placeholder={weightKey.charAt(0).toUpperCase()+weightKey.slice(1)}\r\n                data-tip={grades[i].label} data-for='weightTip'\r\n                onInput={e=> {\r\n                  const newDel = e.target.value.length === 0;\r\n                  setGrades(Array.from(grades, (grade, index)=> index===i ? {...grade, [weightKey]: e.target.value.replace(/\\D/,'')} : grade));\r\n                  setDel(newDel);\r\n                }}\r\n              />\r\n              <label for={`${weightKey}-${i}`}>%</label>\r\n            </Grade>\r\n          );\r\n        })}\r\n          <p style={{margin: '0px', maxWidth: '176px'}}\r\n            data-tip data-for='averageGradeTip'\r\n          >\r\n            Average Grade: {`${parseFloat(averageGrade()).toFixed(2)}%`}\r\n          </p>\r\n          <p style={{margin: '0px', maxWidth: '170px'}}\r\n            data-tip data-for='currentGradeTip'\r\n          > \r\n            Current Grade: {`${parseFloat(currentGrade()).toFixed(2)}%`}\r\n          </p>\r\n        <div\r\n          data-tip\r\n          data-for='gradeGoalTip'\r\n          style={{maxWidth: '180px'}}\r\n        >\r\n            <label\r\n              for=\"goalGrade\"\r\n            >Grade Goal:</label>\r\n            <StyledInput\r\n              type='text' name='goalGrade'\r\n              value={gradeGoal}\r\n              placeholder='Grade Goal'\r\n              \r\n              onInput={e=> {\r\n                setGradeGoal(e.target.value.replace(/\\D/,''));\r\n              }}\r\n            />\r\n        </div>\r\n        <p>\r\n          Remaining Grade Needed: {calculateRemainingGradeStr()}\r\n        </p>\r\n        \r\n    </StyledGrades>\r\n    \r\n\r\n  );\r\n}","import styled from 'styled-components';\r\n\r\nfunction Header() {\r\n  const StyledHeader = styled.header`\r\n    color: white;\r\n    padding: 0px 50px 0px 50px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  `;\r\n  const StyledCreatorText = styled.p`\r\n    padding: 0px;\r\n    margin: 0px;\r\n  `;\r\n  const StyledCreatorLink = styled.a`\r\n    padding: 0px;\r\n    margin: 0px;\r\n    color: white;\r\n  `;\r\n  return (\r\n    <StyledHeader>\r\n      <h1>\r\n          Grade Calculator\r\n      </h1>\r\n      <div>\r\n        <StyledCreatorText>Created By:</StyledCreatorText>\r\n        <StyledCreatorLink target='_blank' href='https://linkedin.com/in/deenhaque/'>Deen Haque</StyledCreatorLink> <br />\r\n        <StyledCreatorLink target='_blank' href=\"https://ericphamep.github.io/\">Eric Pham</StyledCreatorLink>\r\n      </div>\r\n    </StyledHeader>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import Grades from './Grades';\r\nimport Header from './Header';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <Grades />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  @font-face {\r\n    font-family: 'Original Surfer';\r\n    src: url(https://fonts.gstatic.com/s/originalsurfer/v11/RWmQoKGZ9vIirYntXJ3_MbekzNMSC0Fu.woff2) format('woff2');\r\n    font-style: normal;\r\n    font-weight: 400;\r\n  }\r\n\r\n  body {\r\n    background-color: #0D1821;\r\n    margin: 0;\r\n    font-family: 'Original Surfer';\r\n  }\r\n\r\n  p, h2, h3, h4, label {\r\n    color: #F0F4EF;\r\n  }\r\n\r\n  h1 {\r\n    color: #FF6F59;\r\n  }\r\n\r\n  code {\r\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\r\n      monospace;\r\n  }\r\n`\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <GlobalStyle />\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}